


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************/
    2 00000000         ;/* OSasm.s: low-level OS commands, written in assembly 
                                             */
    3 00000000         ;/* derived from uCOS-II                                
                                             */
    4 00000000         ;/******************************************************
                       ***********************/
    5 00000000         ;Jonathan Valvano, OS Lab2/3/4/5, 1/12/20
    6 00000000         ;Students will implement these functions as part of EE44
                       5M/EE380L.12 Lab
    7 00000000         
    8 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    9 00000000                 THUMB
   10 00000000                 REQUIRE8
   11 00000000                 PRESERVE8
   12 00000000         
   13 00000000                 EXTERN           RunPt       ; currently running
                                                             thread
   14 00000000                 EXTERN           SleepNextRunPt ; stored next tc
                                                            b when killed or as
                                                            leep
   15 00000000         
   16 00000000                 EXPORT           StartOS
   17 00000000         ;EXPORT  ContextSwitch
   18 00000000                 EXPORT           PendSV_Handler
   19 00000000                 EXPORT           SVC_Handler
   20 00000000         
   21 00000000         
   22 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   23 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; PendSV priority r
                                                            egister (position 1
                                                            4).
   24 00000000 E000ED23 
                       NVIC_SYSPRI15
                               EQU              0xE000ED23  ; Systick priority 
                                                            register (position 
                                                            15).
   25 00000000 000000EF 
                       NVIC_LEVEL14
                               EQU              0xEF        ; Systick priority 
                                                            value (second lowes
                                                            t).
   26 00000000 000000FF 
                       NVIC_LEVEL15
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   27 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   28 00000000         
   29 00000000         



ARM Macro Assembler    Page 2 


   30 00000000         StartOS
   31 00000000         ; put your code here
   32 00000000 4816            LDR              R0, =RunPt
   33 00000002 6801            LDR              R1, [R0]
   34 00000004 F8D1 D000       LDR              SP, [R1]    ;load localSP
   35 00000008 E8BD 0FF0       POP              {R4-R11}
   36 0000000C BC0F            POP              {R0-R3}
   37 0000000E F85D CB04       POP              {R12}
   38 00000012 F85D EB04       POP              {LR}        ;discard old LR
   39 00000016 F85D EB04       POP              {LR}        ;LR = PC on stack t
                                                            hat points to what 
                                                            we want to run 
   40 0000001A BC04            POP              {R2}        ;discard PSR
   41 0000001C B662            CPSIE            I           ;enable interupts 
   42 0000001E 4770            BX               LR          ; start first threa
                                                            d
   43 00000020         
   44 00000020         OSStartHang
   45 00000020 E7FE            B                OSStartHang ; Should never get 
                                                            here
   46 00000022         
   47 00000022         
   48 00000022         ;*******************************************************
                       *************************************************
   49 00000022         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
   50 00000022         ;                                           void Context
                       Switch(void)
   51 00000022         ;
   52 00000022         ; Note(s) : 1) ContextSwitch() is called when OS wants t
                       o perform a task context switch.  This function
   53 00000022         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
   54 00000022         ;*******************************************************
                       *************************************************
   55 00000022         
   56 00000022         ;ContextSwitch
   57 00000022         ; edit this code
   58 00000022         
   59 00000022         ;BX      LR
   60 00000022         
   61 00000022         
   62 00000022         ;*******************************************************
                       *************************************************
   63 00000022         ;                                         HANDLE PendSV 
                       EXCEPTION
   64 00000022         ;                                     void OS_CPU_PendSV
                       Handler(void)
   65 00000022         ;
   66 00000022         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
   67 00000022         ;              context switches with Cortex-M.  This is 
                       because the Cortex-M3 auto-saves half of the
   68 00000022         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
   69 00000022         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
   70 00000022         ;              this way means that context saving and re
                       storing is identical whether it is initiated from



ARM Macro Assembler    Page 3 


   71 00000022         ;              a thread or occurs due to an interrupt or
                        exception.
   72 00000022         ;
   73 00000022         ;           2) Pseudo-code is:
   74 00000022         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
   75 00000022         ;              b) Save remaining regs r4-r11 on process 
                       stack;
   76 00000022         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
   77 00000022         ;              d) Call OSTaskSwHook();
   78 00000022         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
   79 00000022         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
   80 00000022         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
   81 00000022         ;              h) Restore R4-R11 from new process stack;
                       
   82 00000022         ;              i) Perform exception return which will re
                       store remaining context.
   83 00000022         ;
   84 00000022         ;           3) On entry into PendSV handler:
   85 00000022         ;              a) The following have been saved on the p
                       rocess stack (by processor):
   86 00000022         ;                 xPSR, PC, LR, R12, R0-R3
   87 00000022         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
   88 00000022         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
   89 00000022         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
   90 00000022         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
   91 00000022         ;
   92 00000022         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
   93 00000022         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
   94 00000022         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
   95 00000022         ;*******************************************************
                       *************************************************
   96 00000022         
   97 00000022         PendSV_Handler
   98 00000022         ; put your code here
   99 00000022 B672            CPSID            I           ;disable interupts 
                                                            
  100 00000024 E92D 0FF0       PUSH{R4-R11}
  101 00000028 480C            LDR              R0, =RunPt
  102 0000002A 6801            LDR              R1, [R0]    ;R1 points to curre
                                                            ntly running thread
                                                            
  103 0000002C 688A            LDR              R2, [R1, #8] ; get the thread f
                                                            lag
  104 0000002E F8C1 D000       STR              SP, [R1]    ; save the stack po
                                                            inter
  105 00000032 2A00            CMP              R2, #0
  106 00000034 D000            BEQ              RegularSwitch



ARM Macro Assembler    Page 4 


  107 00000036 E004            B                KillSwitch
  108 00000038         
  109 00000038         
  110 00000038         RegularSwitch
  111 00000038 6849            LDR              R1, [R1, #4] ;load next thread 
                                                            pt
  112 0000003A F8D1 D000       LDR              SP, [R1]    ; load next stack p
                                                            ointer position int
                                                            o sp register
  113 0000003E         
  114 0000003E 6001            STR              R1, [R0]    ; store next thread
                                                             pointer into runpt
                                                            
  115 00000040 E006            B                EndHandler
  116 00000042         
  117 00000042         KillSwitch
  118 00000042         ; grab the next tcb from the runpt and 
  119 00000042 4A07            LDR              R2, =SleepNextRunPt ;load next 
                                                            thread pt
  120 00000044 6811            LDR              R1, [R2]
  121 00000046 684A            LDR              R2, [R1, #4]
  122 00000048 F8D2 D000       LDR              SP, [R2]    ; store next stack 
                                                            pointer position in
                                                            to sp register
  123 0000004C         
  124 0000004C 6002            STR              R2, [R0]    ; store next thread
                                                             pointer into runpt
                                                            
  125 0000004E E7FF            B                EndHandler
  126 00000050         
  127 00000050         EndHandler
  128 00000050 E8BD 0FF0       POP{R4-R11}
  129 00000054 B662            CPSIE            I           ;enable interupts 
  130 00000056 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context   
  131 00000058         
  132 00000058         
  133 00000058         
  134 00000058         ;*******************************************************
                       *************************************************
  135 00000058         ;                                         HANDLE SVC EXC
                       EPTION
  136 00000058         ;                                     void OS_CPU_SVCHan
                       dler(void)
  137 00000058         ;
  138 00000058         ; Note(s) : SVC is a software-triggered exception to mak
                       e OS kernel calls from user land. 
  139 00000058         ;           The function ID to call is encoded in the in
                       struction itself, the location of which can be
  140 00000058         ;           found relative to the return address saved o
                       n the stack on exception entry.
  141 00000058         ;           Function-call paramters in R0..R3 are also a
                       uto-saved on stack on exception entry.
  142 00000058         ;*******************************************************
                       *************************************************
  143 00000058         
  144 00000058                 IMPORT           OS_Id
  145 00000058                 IMPORT           OS_Kill



ARM Macro Assembler    Page 5 


  146 00000058                 IMPORT           OS_Sleep
  147 00000058                 IMPORT           OS_Time
  148 00000058                 IMPORT           OS_AddThread
  149 00000058         
  150 00000058         SVC_Handler
  151 00000058         ; put your Lab 5 code here
  152 00000058         
  153 00000058         
  154 00000058 4770            BX               LR          ; Return from excep
                                                            tion
  155 0000005A         
  156 0000005A         
  157 0000005A         
  158 0000005A 00 00           ALIGN
  159 0000005C                 END
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4 --fpu=
SoftVFP --depend=.\osasm.d -o.\osasm.o -I.\RTE\_Lab2 -IC:\Users\jibra\AppData\L
ocal\Arm\Packs\ARM\CMSIS\6.1.0\CMSIS\Core\Include -IC:\Users\jibra\AppData\Loca
l\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__EVAL SETA
 1" --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 541" --
predefine="TM4C123GH6PM SETA 1" --predefine="_RTE_ SETA 1" --list=.\osasm.lst .
.\RTOS_Labs_common\osasm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 8 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: .text unused
EndHandler 00000050

Symbol: EndHandler
   Definitions
      At line 127 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 115 in file ..\RTOS_Labs_common\osasm.s
      At line 125 in file ..\RTOS_Labs_common\osasm.s

KillSwitch 00000042

Symbol: KillSwitch
   Definitions
      At line 117 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 107 in file ..\RTOS_Labs_common\osasm.s
Comment: KillSwitch used once
OSStartHang 00000020

Symbol: OSStartHang
   Definitions
      At line 44 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 45 in file ..\RTOS_Labs_common\osasm.s
Comment: OSStartHang used once
PendSV_Handler 00000022

Symbol: PendSV_Handler
   Definitions
      At line 97 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 18 in file ..\RTOS_Labs_common\osasm.s
Comment: PendSV_Handler used once
RegularSwitch 00000038

Symbol: RegularSwitch
   Definitions
      At line 110 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 106 in file ..\RTOS_Labs_common\osasm.s
Comment: RegularSwitch used once
SVC_Handler 00000058

Symbol: SVC_Handler
   Definitions
      At line 150 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 19 in file ..\RTOS_Labs_common\osasm.s
Comment: SVC_Handler used once
StartOS 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: StartOS
   Definitions
      At line 30 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 16 in file ..\RTOS_Labs_common\osasm.s
Comment: StartOS used once
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 22 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_INT_CTRL unused
NVIC_LEVEL14 000000EF

Symbol: NVIC_LEVEL14
   Definitions
      At line 25 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_LEVEL14 unused
NVIC_LEVEL15 000000FF

Symbol: NVIC_LEVEL15
   Definitions
      At line 26 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_LEVEL15 unused
NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 27 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_PENDSVSET unused
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 23 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_SYSPRI14 unused
NVIC_SYSPRI15 E000ED23

Symbol: NVIC_SYSPRI15
   Definitions
      At line 24 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_SYSPRI15 unused
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OS_AddThread 00000000

Symbol: OS_AddThread
   Definitions
      At line 148 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: OS_AddThread unused
OS_Id 00000000

Symbol: OS_Id
   Definitions
      At line 144 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: OS_Id unused
OS_Kill 00000000

Symbol: OS_Kill
   Definitions
      At line 145 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: OS_Kill unused
OS_Sleep 00000000

Symbol: OS_Sleep
   Definitions
      At line 146 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: OS_Sleep unused
OS_Time 00000000

Symbol: OS_Time
   Definitions
      At line 147 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: OS_Time unused
RunPt 00000000

Symbol: RunPt
   Definitions
      At line 13 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 32 in file ..\RTOS_Labs_common\osasm.s
      At line 101 in file ..\RTOS_Labs_common\osasm.s

SleepNextRunPt 00000000

Symbol: SleepNextRunPt
   Definitions
      At line 14 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 119 in file ..\RTOS_Labs_common\osasm.s
Comment: SleepNextRunPt used once
7 symbols
358 symbols in table
